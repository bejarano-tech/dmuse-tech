import { C as ContractSubmittableResult } from './api-contract-c4a7a321.js';
import { L as LazyContractOptions, T as TransactionStatus } from './contracts-5e7fdfd7.js';
import { ChainId } from './chains.js';
import { Abi, ContractPromise } from '@polkadot/api-contract';
import { ContractOptions } from '@polkadot/api-contract/types';
import { BN } from '@polkadot/util';
import { ApiBase } from '@polkadot/api/types';
import { EventRecord } from '@polkadot/types/interfaces';

type CallOptions = Omit<ContractOptions, 'value'> & {
    defaultCaller?: boolean;
    value?: bigint | BN | string | number | undefined;
};
type ContractAbi = string | Record<string, unknown> | Abi;
interface ChainContract<T extends ContractPromise = ContractPromise> {
    contract: T;
    chainId: ChainId;
}

type ContractSubmittableResultCallback = (result?: ContractSubmittableResult, api?: ApiBase<'promise'>, error?: unknown) => void;
type SignAndSend = (args?: unknown[], o?: LazyContractOptions, cb?: ContractSubmittableResultCallback) => void;
interface Tx<T> {
    signAndSend: SignAndSend;
    status: TransactionStatus;
    result: ContractSubmittableResult | undefined;
    resetState: () => void;
    events: EventRecord[];
}
declare function useTx<T>(chainContract: ChainContract | undefined, message: string): Tx<T>;

export { ChainContract as C, SignAndSend as S, Tx as T, ContractSubmittableResultCallback as a, CallOptions as b, ContractAbi as c, useTx as u };
