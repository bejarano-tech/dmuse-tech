import { ExtrinsicStatus, ContractExecResult, DispatchError, ContractProjectSource, Weight, StorageDeposit, Balance } from '@polkadot/types/interfaces';
import { Abi } from '@polkadot/api-contract';
import { ContractOptions, BlueprintOptions, AbiMessage } from '@polkadot/api-contract/types';

type TransactionStatus = ExtrinsicStatus['type'] | 'None' | 'DryRun' | 'PendingSignature' | 'Errored';
interface WithAddress {
    address: string | undefined;
}

type Result<T, E = Error> = {
    ok: true;
    value: T;
} | {
    ok: false;
    error: E;
};

type ContractAbi = string | Record<string, unknown> | Abi;
type LazyContractOptions = Partial<ContractOptions>;
type LazyCallOptions = LazyContractOptions & {
    defaultCaller?: boolean;
};
type DeployOptions = BlueprintOptions & LazyCallOptions & {
    codeHash?: string;
};
interface ContractExecResultDecoded<T> extends Omit<TxInfo, 'partialFee'> {
    readonly decoded: T;
    readonly raw: ContractExecResult;
}
interface TxExecResultDecoded<T> extends TxInfo {
    readonly decoded: T;
    readonly raw: ContractExecResult;
}
type DecodedResult<T> = Result<T, DispatchError>;
type DecodedContractResult<T> = DecodedResult<ContractExecResultDecoded<T>>;
type DecodedTxResult<T> = DecodedResult<TxExecResultDecoded<T>>;
type Wasm = Pick<ContractProjectSource, 'wasm'>['wasm'];
interface ContractCallResultRaw {
    readonly callResult: ContractExecResult;
    readonly abiMessage: AbiMessage;
}
interface CallInfo {
    gasRequired: Weight;
    gasConsumed: Weight;
    storageDeposit: StorageDeposit;
}
interface TxInfo {
    gasRequired: Weight;
    gasConsumed: Weight;
    storageDeposit: StorageDeposit;
    partialFee: Balance;
}
interface TxInfo {
    gasRequired: Weight;
    gasConsumed: Weight;
    storageDeposit: StorageDeposit;
    partialFee: Balance;
}

export { ContractAbi as C, DecodedContractResult as D, LazyContractOptions as L, Result as R, TransactionStatus as T, WithAddress as W, DecodedResult as a, DeployOptions as b, LazyCallOptions as c, TxInfo as d, ContractExecResultDecoded as e, TxExecResultDecoded as f, DecodedTxResult as g, Wasm as h, ContractCallResultRaw as i, CallInfo as j };
