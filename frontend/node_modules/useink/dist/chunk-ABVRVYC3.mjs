// src/react/constants.ts
var FIVE_SECONDS = 5e3;
var HALF_A_SECOND = 500;

// src/react/hooks/internal/useIsMounted.ts
import React from "react";
function useIsMounted() {
  const isMounted = React.useRef(false);
  React.useEffect(() => {
    isMounted.current = true;
    return () => {
      isMounted.current = false;
    };
  }, []);
  return React.useCallback(() => isMounted.current, []);
}

// src/react/hooks/internal/useInterval.ts
import { useEffect, useRef } from "react";
function useInterval(callback, delay) {
  const savedCallback = useRef(callback);
  useEffect(() => {
    savedCallback.current = callback;
  }, [callback]);
  useEffect(() => {
    if (delay === null)
      return;
    const id = setInterval(() => savedCallback.current(), delay);
    return () => clearInterval(id);
  }, [delay]);
}

export {
  FIVE_SECONDS,
  HALF_A_SECOND,
  useIsMounted,
  useInterval
};
