import * as React from 'react';
import React__default from 'react';
import { ChainId } from './chains.js';
import { T as TransactionStatus } from './contracts-5e7fdfd7.js';
import { Codec, ISubmittableResult } from '@polkadot/types/types';
import { T as Tx } from './useTx-805af648.js';
import '@polkadot/types/interfaces';
import '@polkadot/api-contract';
import '@polkadot/api-contract/types';
import './api-contract-c4a7a321.js';
import '@polkadot/api';
import '@polkadot/util';
import '@polkadot/api/types';

type NotificationType = 'WalletConnected' | 'WalletDisconnected' | TransactionStatus;
type NotificationPayload = {
    createdAt: number;
    type: NotificationType;
    result?: Codec | ISubmittableResult;
    message: string;
    chain?: ChainId;
};
type AddNotificationPayload = Omit<NotificationPayload, 'createdAt'>;
type Notification = {
    id: string;
} & NotificationPayload;
type Notifications = Notification[];
interface Config {
    expiration?: number;
    checkInterval?: number;
}
declare const DEFAULT_NOTIFICATIONS: Notifications;
interface AddNotification {
    type: 'ADD_NOTIFICATION';
    notification: Notification;
}
interface RemoveNotification {
    type: 'REMOVE_NOTIFICATION';
    notificationId: string;
}
type Action = AddNotification | RemoveNotification;

declare const NotificationsContext: React.Context<{
    config?: Config | undefined;
    notifications: Notifications;
    addNotification: (payload: AddNotificationPayload) => void;
    removeNotification: (notificationId: string) => void;
}>;

interface UseNotifications {
    notifications: Notifications;
    addNotification: (payload: AddNotificationPayload) => void;
    removeNotification: (notificationId: string) => void;
}
declare const useNotifications: () => UseNotifications;

type TxInfo<T> = Pick<Tx<T>, 'status'> & Pick<Tx<T>, 'result'>;
declare function useTxNotifications<T>(tx: TxInfo<T>, chain?: ChainId): void;

declare const NotificationsProvider: React__default.FC<React__default.PropsWithChildren<{
    config?: Config;
}>>;

type NotificationLevel = 'success' | 'error' | 'warning' | 'info';

declare const toNotificationLevel: (type: NotificationType) => NotificationLevel;

export { Action, AddNotification, AddNotificationPayload, Config, DEFAULT_NOTIFICATIONS, Notification, NotificationLevel, NotificationPayload, NotificationType, Notifications, NotificationsContext, NotificationsProvider, RemoveNotification, UseNotifications, toNotificationLevel, useNotifications, useTxNotifications };
