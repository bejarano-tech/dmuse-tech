import { AccountId, ContractExecResult, DispatchError, ContractExecResultResult, RuntimeDispatchInfo, Hash } from '@polkadot/types/interfaces';
export { AccountId, Balance, ContractExecResult, ContractExecResultResult, ContractInstantiateResult, ContractProjectSource, DispatchError, DispatchInfo, EventRecord, ExtrinsicStatus, Hash, Header, RuntimeDispatchInfo, StorageDeposit, Weight, WeightV2 } from '@polkadot/types/interfaces';
import { ContractPromise } from '@polkadot/api-contract';
export { Abi, BlueprintPromise, CodePromise, ContractPromise } from '@polkadot/api-contract';
import { AbiMessage, ContractOptions } from '@polkadot/api-contract/types';
export { AbiMessage, AbiParam, BlueprintOptions, ContractOptions, DecodedEvent } from '@polkadot/api-contract/types';
import { L as LazyContractOptions, D as DecodedContractResult, a as DecodedResult, b as DeployOptions, R as Result, W as WithAddress } from './contracts-5e7fdfd7.js';
export { j as CallInfo, C as ContractAbi, i as ContractCallResultRaw, e as ContractExecResultDecoded, g as DecodedTxResult, c as LazyCallOptions, T as TransactionStatus, f as TxExecResultDecoded, d as TxInfo, h as Wasm } from './contracts-5e7fdfd7.js';
import { Registry, RegistryError } from '@polkadot/types/types';
export { AnyJson, Codec, ISubmittableResult, Registry, RegistryError, TypeDef } from '@polkadot/types/types';
import { C as Contract, R as RegistryErrorMethod } from './tokens-f0d70f39.js';
export { a as CallResult, I as IRegistryInfo, b as chainDecimals, c as chainTokenSymbol } from './tokens-f0d70f39.js';
import { ApiBase, SignerOptions, AddressOrPair, QueryableModuleCalls } from '@polkadot/api/types';
export { AddressOrPair, ApiBase, QueryableModuleCalls, SignerOptions, SubmittableExtrinsic, VoidFn } from '@polkadot/api/types';
import { M as MetadataState, D as DeriveMetadataOptions } from './jsonToAbi-312b7654.js';
export { a as MetadataOptions } from './jsonToAbi-312b7654.js';
import { ApiPromise } from '@polkadot/api';
export { ApiPromise, WsProvider } from '@polkadot/api';
import { DeriveBalancesAccount } from '@polkadot/api-derive/types';
export { DeriveBalancesAccount, DeriveBalancesMap } from '@polkadot/api-derive/types';
export { C as ContractSubmittableResult } from './api-contract-c4a7a321.js';
export { A as ArrayOneOrMore } from './array-a9317543.js';
export { WalletAccount, getWalletBySource, getWallets } from '@talismn/connect-wallets';
export { BlueprintSubmittableResult, CodeSubmittableResult } from '@polkadot/api-contract/base';
export { Bytes, TypeDefInfo, getTypeDef } from '@polkadot/types';

type Unsub = () => void;

declare function call<T>(contract: ContractPromise, abiMessage: AbiMessage, caller: AccountId | string, args?: unknown[], options?: LazyContractOptions): Promise<DecodedContractResult<T> | undefined>;

declare function decodeCallResult<T>(result: ContractExecResult['result'], message: AbiMessage, registry: Registry): DecodedResult<T>;

declare const decodeError: (dispatchError: DispatchError | undefined, chainContract: Contract | undefined, moduleMessages?: Record<RegistryErrorMethod, string>, defaultMessage?: string) => string | undefined;

declare const getRegistryError: (error: DispatchError | undefined, { contract: { api } }: Contract) => RegistryError | undefined;

declare const DEFAULT_CONTRACT_OPTIONS: ContractOptions;
declare const toContractOptions: (options?: LazyContractOptions) => ContractOptions;
declare const DEFAULT_DEPLOY_OPTIONS: DeployOptions;
declare const toDeployOptions: (options?: LazyContractOptions) => DeployOptions;

declare const DEFAULT: MetadataState;
declare const jsonToAbi: (options: DeriveMetadataOptions, source?: Record<string, unknown>, api?: ApiBase<'promise'> | null) => MetadataState;

declare const toContractAbiMessage: (contract: ContractPromise, message: string) => Result<AbiMessage, string>;

declare const toRegistryErrorDecoded: (registry: Registry, result: ContractExecResultResult) => RegistryError | undefined;

declare function txPaymentInfo(contract: ContractPromise | undefined, message: string, caller: AccountId | string, params?: unknown[], options?: LazyContractOptions, signerOptions?: Partial<SignerOptions>): Promise<RuntimeDispatchInfo | undefined>;

declare const getBalance: (api: ApiPromise | undefined, account: WithAddress | undefined) => Promise<DeriveBalancesAccount | undefined>;

declare const transfer: (api: ApiPromise | undefined, to: string | undefined, amount: number, signer: AddressOrPair, options?: SignerOptions) => Promise<Hash | undefined>;

declare const getTimestampDate: (api: ApiBase<'promise'> | undefined) => Promise<Date | undefined>;

declare const getTimestampUnix: (api: ApiBase<'promise'> | undefined) => Promise<number | undefined>;

declare const getTimestampQuery: (api: ApiBase<'promise'> | undefined) => QueryableModuleCalls<'promise'> | undefined;

export { Contract, DEFAULT, DEFAULT_CONTRACT_OPTIONS, DEFAULT_DEPLOY_OPTIONS, DecodedContractResult, DecodedResult, DeployOptions, DeriveMetadataOptions, LazyContractOptions, MetadataState, RegistryErrorMethod, Result, Unsub, WithAddress, call, decodeCallResult, decodeError, getBalance, getRegistryError, getTimestampDate, getTimestampQuery, getTimestampUnix, jsonToAbi, toContractAbiMessage, toContractOptions, toDeployOptions, toRegistryErrorDecoded, transfer, txPaymentInfo };
