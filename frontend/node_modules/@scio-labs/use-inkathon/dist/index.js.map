{"version":3,"sources":["../src/chains.ts","../src/helpers/accountsAreEqual.ts","../src/helpers/contractCall.ts","../src/helpers/getAbiMessage.ts","../src/helpers/decodeOutput.ts","../src/helpers/getBalance.ts","../src/helpers/formatBalance.ts","../src/helpers/getGasLimit.ts","../src/helpers/deployContract.ts","../src/helpers/initPolkadotJs.ts","../src/helpers/transferBalance.ts","../src/helpers/unwrapResult.ts","../src/registry.ts","../src/wallets.ts","../src/provider.tsx","../src/hooks/useBalance.ts","../src/hooks/useContract.ts","../src/hooks/useRegisteredContract.ts"],"names":["SubstrateExplorer","development","alephzeroTestnet","rococo","shibuya","shiden","alephzero","astar","allSubstrateChains","getSubstrateChain","networkId","chain","accountsAreEqual","a1","a2","accountArraysAreEqual","a","i","BN","bnToBn","stringCamelCase","getAbiMessage","contract","method","abiMessage","m","isErr","o","isOk","getReturnTypeName","type","decodeOutput","result","_a","_b","_c","_d","output","decodedOutput","isError","returnType","returnTypeName","registry","r","errorText","okText","errorKey","errorValue","polkadotFormatBalance","formatBalance","api","value","options","tokenDecimals","tokenSymbol","_options","formattedBalance","__spreadProps","__spreadValues","siUnit","toFixedIfNecessary","decimals","_value","getBalance","address","formatterOptions","__async","parseBalanceData","watchBalance","callback","data","balanceData","freeBalance","reservedBalance","balance","balanceFormatted","getGasLimit","_refTime","_proofSize","refTime","proofSize","getMaxGasLimit","reductionFactor","blockWeights","maxExtrinsic","maxRefTime","maxProofSize","contractCallDryRun","_0","_1","_2","_3","_4","account","args","gasLimit","storageDepositLimit","contractQuery","queryFn","contractTx","statusCb","accountAddress","hasZeroBalance","hasBalanceBelowPassedValue","dryResult","resolve","reject","isDevelopment","finalStatus","asFinalStatus","unsub","extrinsicHash","extrinsicIndex","blockHash","errorEvent","event","successEvent","e","errorMessage","CodePromise","deployContract","abi","wasm","constructorMethod","code","constructorFn","events","status","extrinsicFailedEvent","hash","block","blockNumber","ApiPromise","HttpProvider","WsProvider","initPolkadotJs","rpcUrl","provider","transferBalance","fromAccount","toAddress","amount","isInBlock","transferFullBalance","keepAlive","unwrapResultOrError","outcome","unwrapResultOrDefault","defaultValue","unwrappedResult","ContractPromise","registerDeployment","setDeployments","deployment","deployments","idx","contractId","registerDeployments","getDeployment","getDeploymentContract","SubstrateWalletPlatform","polkadotjs","subwallet","talisman","nova","allSubstrateWallets","getSubstrateWallet","id","wallet","isWalletInstalled","injectedWindow","enableWallet","appName","injectedWindowProvider","createContext","useContext","useEffect","useState","jsx","UseInkathonErrorCode","UseInkathonProviderContext","useInkathon","context","UseInkathonProvider","children","defaultChain","connectOnInit","_deployments","apiOptions","isInitializing","setIsInitializing","isInitialized","setIsInitialized","isConnecting","setIsConnecting","isConnected","setIsConnected","error","setError","activeChain","setActiveChain","setApi","setProvider","accounts","setAccounts","activeAccount","setActiveAccount","activeExtension","setActiveExtension","lastActiveAccount","setLastActiveAccount","activeSigner","setActiveSigner","unsubscribeAccounts","setUnsubscribeAccounts","initialize","_chain","message","updateAccounts","injectedAccounts","lastActiveAccountAddress","newAccounts","_lastAccount","newAccount","connect","wallets","w","_wallet","extension","signer","unsubscribe","disconnect","disconnectApi","handler","switchActiveChain","activeWallet","useBalance","watch","setFreeBalance","setReservedBalance","setBalance","setBalanceFormatted","setTokenSymbol","setTokenDecimals","unsubscribes","setUnsubscribes","updateBalanceData","prev","useContract","setContract","useRegisteredContract"],"mappings":"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","sourcesContent":["/**\n * Substrate Chain Type\n */\nexport interface SubstrateChain {\n  network: string\n  name: string\n  rpcUrls: [string, ...string[]]\n  ss58Prefix?: number\n  explorerUrls?: Partial<Record<SubstrateExplorer, string>>\n  testnet?: boolean\n  faucetUrls?: string[]\n}\n\nexport enum SubstrateExplorer {\n  Subscan = 'subscan',\n  PolkadotJs = 'polkadotjs',\n}\n\n/**\n * Defined Substrate Chain Constants\n */\n\n/// Local Development Network\nexport const development: SubstrateChain = {\n  network: 'development',\n  name: 'Local Development',\n  ss58Prefix: 42,\n  rpcUrls: ['ws://127.0.0.1:9944'],\n  explorerUrls: {\n    [SubstrateExplorer.PolkadotJs]: `https://polkadot.js.org/apps/?rpc=${encodeURIComponent(\n      'ws://127.0.0.1:9944',\n    )}/#/explorer`,\n  },\n  testnet: true,\n  faucetUrls: [\n    'https://polkadot.js.org/apps/#/accounts?rpc=ws://127.0.0.1:9944',\n  ],\n}\n\n/// Testnets\n\nexport const alephzeroTestnet: SubstrateChain = {\n  network: 'alephzero-testnet',\n  name: 'Aleph Zero Testnet',\n  ss58Prefix: 42,\n  rpcUrls: ['wss://ws.test.azero.dev'],\n  explorerUrls: {\n    [SubstrateExplorer.PolkadotJs]: `https://test.azero.dev/?rpc=${encodeURIComponent(\n      'wss://ws.test.azero.dev',\n    )}/#/explorer`,\n  },\n  testnet: true,\n  faucetUrls: ['https://faucet.test.azero.dev'],\n}\n\nexport const rococo: SubstrateChain = {\n  network: 'rococo',\n  name: 'Rococo',\n  rpcUrls: ['wss://rococo-rpc.polkadot.io'],\n  explorerUrls: {\n    [SubstrateExplorer.Subscan]: `https://rococo.subscan.io`,\n  },\n  testnet: true,\n  faucetUrls: ['https://matrix.to/#/#rococo-faucet:matrix.org'],\n}\n\nexport const shibuya: SubstrateChain = {\n  network: 'shibuya',\n  name: 'Shibuya Testnet',\n  ss58Prefix: 5,\n  rpcUrls: ['wss://shibuya-rpc.dwellir.com'],\n  explorerUrls: {\n    [SubstrateExplorer.Subscan]: `https://shibuya.subscan.io`,\n  },\n  testnet: true,\n  faucetUrls: ['https://portal.astar.network/#/shibuya-testnet/assets'],\n}\n\n/// Canary Networks (Kusama)\n\nexport const shiden: SubstrateChain = {\n  network: 'shiden',\n  name: 'Shiden',\n  ss58Prefix: 5,\n  rpcUrls: ['wss://shiden-rpc.dwellir.com'],\n  explorerUrls: {\n    [SubstrateExplorer.Subscan]: `https://shiden.subscan.io`,\n  },\n}\n\n/// Mainnets\n\nexport const alephzero: SubstrateChain = {\n  network: 'alephzero',\n  name: 'Aleph Zero',\n  ss58Prefix: 42,\n  rpcUrls: ['wss://ws.azero.dev'],\n  explorerUrls: {\n    [SubstrateExplorer.Subscan]: `https://alephzero.subscan.io`,\n    [SubstrateExplorer.PolkadotJs]: `https://azero.dev/?rpc=${encodeURIComponent(\n      'wss://ws.azero.dev',\n    )}/#/explorer`,\n  },\n}\n\nexport const astar: SubstrateChain = {\n  network: 'astar',\n  name: 'Astar',\n  ss58Prefix: 5,\n  rpcUrls: ['wss://astar-rpc.dwellir.com'],\n  explorerUrls: {\n    [SubstrateExplorer.Subscan]: `https://astar.subscan.io`,\n  },\n  faucetUrls: [],\n}\n\n/**\n * Exporting all chains separately\n */\nexport const allSubstrateChains: SubstrateChain[] = [\n  development,\n  alephzeroTestnet,\n  rococo,\n  shibuya,\n  shiden,\n  alephzero,\n  astar,\n]\n\n/**\n * Returns chain (if existent) for given identifier (`network` field).\n */\nexport const getSubstrateChain = (\n  networkId?: string,\n): SubstrateChain | undefined => {\n  return allSubstrateChains.find(\n    (chain) => chain.network.toLowerCase() === (networkId || '').toLowerCase(),\n  )\n}\n","import { InjectedAccount } from '@polkadot/extension-inject/types'\n\n/**\n * Returns true if both given injected accounts have the same address.\n */\nexport const accountsAreEqual = (\n  a1?: InjectedAccount,\n  a2?: InjectedAccount,\n) => {\n  return (a1?.address || '').toLowerCase() === (a2?.address || '').toLowerCase()\n}\n\n/**\n * Returns true if both given arrays of injected accounts contain the\n * same objects with the same addresses in the same order.\n */\nexport const accountArraysAreEqual = (\n  a1: InjectedAccount[],\n  a2: InjectedAccount[],\n) => {\n  if (a1.length !== a2.length) return false\n  return a1.every((a, i) => accountsAreEqual(a, a2[i]))\n}\n","import { ApiPromise } from '@polkadot/api'\nimport { ContractPromise } from '@polkadot/api-contract'\nimport {\n  ContractCallOutcome,\n  ContractOptions,\n} from '@polkadot/api-contract/types'\nimport { EventRecord } from '@polkadot/types/interfaces'\nimport {\n  Callback,\n  IKeyringPair,\n  ISubmittableResult,\n} from '@polkadot/types/types'\nimport { BN, bnToBn, stringCamelCase } from '@polkadot/util'\nimport { decodeOutput } from './decodeOutput'\nimport { getAbiMessage } from './getAbiMessage'\nimport { getBalance } from './getBalance'\nimport { getMaxGasLimit } from './getGasLimit'\n\n/**\n * Performs a dry run for the given contract method and arguments.\n * Is used within `contractQuery` & `contractTx` for gas estimation.\n */\nexport const contractCallDryRun = async (\n  api: ApiPromise,\n  account: IKeyringPair | string,\n  contract: ContractPromise,\n  method: string,\n  options = {} as ContractOptions,\n  args = [] as unknown[],\n): Promise<ContractCallOutcome> => {\n  const abiMessage = getAbiMessage(contract, method)\n  const address = (account as IKeyringPair)?.address || account\n  const { value, gasLimit, storageDepositLimit } = options\n  const result = await api.call.contractsApi.call<ContractCallOutcome>(\n    address,\n    contract.address,\n    value ?? new BN(0),\n    gasLimit ?? null,\n    storageDepositLimit ?? null,\n    abiMessage.toU8a(args),\n  )\n\n  return result\n}\n\n/**\n * Calls a given non-mutating contract method (query) with maximum possible gas limit.\n */\nexport const contractQuery = async (\n  api: ApiPromise,\n  address: string,\n  contract: ContractPromise,\n  method: string,\n  options = {} as ContractOptions,\n  args = [] as unknown[],\n): Promise<ContractCallOutcome> => {\n  // HACK: This should be possible by setting the `gasLimit` to null or -1 in the future.\n  const gasLimit = getMaxGasLimit(api)\n\n  // Call actual query/tx\n  const queryFn = contract.query[stringCamelCase(method)]\n  return await queryFn(address, { ...options, gasLimit }, ...args)\n}\n\n/**\n * Calls a given mutating contract method (tx) and wraps it in a promise.\n * Before, a dry run is performed to determine the required gas & potential errors.\n */\nexport type ContractTxResult = {\n  dryResult: ContractCallOutcome\n  result?: ISubmittableResult\n  errorMessage?:\n    | string\n    | 'UserCancelled'\n    | 'ExtrinsicFailed'\n    | 'TokenBelowMinimum'\n    | 'Error'\n  errorEvent?: EventRecord\n  successEvent?: EventRecord\n  extrinsicHash?: string\n  extrinsicIndex?: number\n  blockHash?: string\n}\nexport const contractTx = async (\n  api: ApiPromise,\n  account: IKeyringPair | string,\n  contract: ContractPromise,\n  method: string,\n  options = {} as ContractOptions,\n  args = [] as unknown[],\n  statusCb?: Callback<ISubmittableResult>,\n): Promise<ContractTxResult> => {\n  // Check if account has sufficient balance\n  const accountAddress = typeof account === 'string' ? account : account.address\n  const { freeBalance } = await getBalance(api, accountAddress)\n  const hasZeroBalance = !freeBalance || freeBalance.isZero()\n  const hasBalanceBelowPassedValue =\n    options?.value && freeBalance && freeBalance.lte(bnToBn(options.value))\n  if (hasZeroBalance || hasBalanceBelowPassedValue) {\n    return Promise.reject({\n      errorMessage: 'TokenBelowMinimum',\n    })\n  }\n\n  // Dry run to determine required gas and potential errors\n  delete options.gasLimit\n  const dryResult = await contractCallDryRun(\n    api,\n    account,\n    contract,\n    method,\n    options,\n    args,\n  )\n  const { isError, decodedOutput } = decodeOutput(dryResult, contract, method)\n  if (isError)\n    return Promise.reject({\n      dryResult,\n      errorMessage: decodedOutput || 'Error',\n    })\n\n  // Call actual query/tx & wrap it in a promise\n  const gasLimit = dryResult.gasRequired\n  return new Promise(async (resolve, reject) => {\n    try {\n      const isDevelopment =\n        (api.runtimeChain || '').toLowerCase() === 'development'\n          ? 'isInBlock'\n          : 'isFinalized'\n      const finalStatus = isDevelopment ? 'isInBlock' : 'isFinalized'\n      const asFinalStatus = isDevelopment ? 'asInBlock' : 'asFinalized'\n\n      const tx = contract.tx[stringCamelCase(method)](\n        { ...options, gasLimit },\n        ...args,\n      )\n\n      const unsub = await tx.signAndSend(account, async (result) => {\n        statusCb?.(result)\n\n        const isFinalized = result?.status?.[finalStatus]\n        if (!isFinalized) return\n\n        // Determine extrinsic and block info\n        const extrinsicHash = result.txHash.toHex()\n        const extrinsicIndex = result.txIndex\n        const blockHash = result.status[asFinalStatus].toHex()\n\n        const errorEvent = result?.events.find(({ event }) =>\n          api.events.system.ExtrinsicFailed.is(event),\n        )\n        if (errorEvent) {\n          // Reject if `ExtrinsicFailed` event was found\n          reject({\n            dryResult,\n            errorMessage: decodeOutput || 'ExtrinsicFailed',\n            errorEvent,\n            extrinsicHash,\n            extrinsicIndex,\n            blockHash,\n          })\n          unsub?.()\n        } else {\n          // Resolve succesfully otherwise\n          const successEvent = result?.events.find(({ event }) =>\n            api.events.system.ExtrinsicSuccess.is(event),\n          )\n\n          resolve({\n            dryResult,\n            result,\n            successEvent,\n            extrinsicHash,\n            extrinsicIndex,\n            blockHash,\n          })\n          unsub?.()\n        }\n      })\n    } catch (e: any) {\n      let errorMessage = 'Error'\n\n      if (e?.message?.match(/user reject request/i)) {\n        errorMessage = 'UserCancelled'\n      }\n\n      const errorText = e?.toString?.()\n      const rpcErrorCode =\n        errorText && typeof errorText === 'string'\n          ? errorText.match(/RpcError: (\\d+):/i)?.[1]\n          : null\n      switch (rpcErrorCode) {\n        case '1010':\n          errorMessage = 'TokenBelowMinimum'\n          break\n        default:\n          break\n      }\n\n      reject({ errorMessage })\n    }\n  })\n}\n","import { ContractPromise } from '@polkadot/api-contract'\nimport { stringCamelCase } from '@polkadot/util'\n\n/**\n * Returns the ABI message for the given method name within the given contract.\n */\nexport const getAbiMessage = (contract: ContractPromise, method: string) => {\n  const abiMessage = contract.abi.messages.find(\n    (m) => stringCamelCase(m.method) === stringCamelCase(method),\n  )\n  if (!abiMessage) {\n    throw new Error(`\"${method}\" not found in Contract`)\n  }\n  return abiMessage\n}\n","import { ContractPromise } from '@polkadot/api-contract'\nimport { ContractExecResult } from '@polkadot/types/interfaces'\nimport { AnyJson, TypeDef } from '@polkadot/types/types'\nimport { getAbiMessage } from './getAbiMessage'\n\n/**\n * Helper types & functions\n * SOURCE: https://github.com/paritytech/contracts-ui (GPL-3.0-only)\n */\ntype ContractResultErr = {\n  Err: AnyJson\n}\n\ninterface ContractResultOk {\n  Ok: AnyJson\n}\n\nfunction isErr(\n  o: ContractResultErr | ContractResultOk | AnyJson,\n): o is ContractResultErr {\n  return typeof o === 'object' && o !== null && 'Err' in o\n}\n\nfunction isOk(\n  o: ContractResultErr | ContractResultOk | AnyJson,\n): o is ContractResultOk {\n  return typeof o === 'object' && o !== null && 'Ok' in o\n}\n\nfunction getReturnTypeName(type: TypeDef | null | undefined) {\n  return type?.lookupName || type?.type || ''\n}\n\n/**\n * Decodes & unwraps outputs and errors of a given result, contract, and method.\n * Parsed error message can be found in `decodedOutput` if `isError` is true.\n * SOURCE: https://github.com/paritytech/contracts-ui (GPL-3.0-only)\n */\nexport function decodeOutput(\n  { result }: Pick<ContractExecResult, 'result' | 'debugMessage'>,\n  contract: ContractPromise,\n  method: string,\n): {\n  output: any\n  decodedOutput: string\n  isError: boolean\n} {\n  let output\n  let decodedOutput = ''\n  let isError = true\n\n  if (result.isOk) {\n    const flags = result.asOk.flags.toHuman()\n    isError = flags.includes('Revert')\n    const abiMessage = getAbiMessage(contract, method)\n    const returnType = abiMessage.returnType\n    const returnTypeName = getReturnTypeName(returnType)\n    const registry = contract.abi.registry\n    const r = returnType\n      ? registry.createTypeUnsafe(returnTypeName, [result.asOk.data]).toHuman()\n      : '()'\n    output = isOk(r) ? r.Ok : isErr(r) ? r.Err : r\n\n    const errorText = isErr(output)\n      ? typeof output.Err === 'object'\n        ? JSON.stringify(output.Err, null, 2)\n        : output.Err?.toString() ?? 'Error'\n      : output !== 'Ok'\n      ? output?.toString() || 'Error'\n      : 'Error'\n\n    const okText = isOk(r)\n      ? typeof output === 'object'\n        ? JSON.stringify(output, null, '\\t')\n        : output?.toString() ?? '()'\n      : JSON.stringify(output, null, '\\t') ?? '()'\n\n    decodedOutput = isError ? errorText : okText\n  } else if (result.isErr) {\n    output = result.toHuman()\n\n    let errorText\n    if (\n      isErr(output) &&\n      typeof output.Err === 'object' &&\n      Object.keys(output.Err || {}).length &&\n      typeof Object.values(output.Err || {})[0] === 'string'\n    ) {\n      const [errorKey, errorValue] = Object.entries(output.Err || {})[0]\n      errorText = `${errorKey}${errorValue}`\n    }\n\n    decodedOutput = errorText || 'Error'\n  }\n\n  return {\n    output,\n    decodedOutput,\n    isError,\n  }\n}\n","import { ApiPromise } from '@polkadot/api'\nimport { AccountId } from '@polkadot/types/interfaces'\nimport { BN } from '@polkadot/util'\nimport { BalanceFormatterOptions, formatBalance } from './formatBalance'\n\nexport type BalanceData = {\n  tokenDecimals: number\n  tokenSymbol: string\n  freeBalance?: BN\n  reservedBalance?: BN\n  balance?: BN\n  balanceFormatted?: string\n}\n\n/**\n * Returns the native token balance of the given `address`.\n */\nexport const getBalance = async (\n  api: ApiPromise,\n  address: string | AccountId | undefined,\n  formatterOptions?: BalanceFormatterOptions,\n): Promise<BalanceData> => {\n  if (!address) {\n    const { tokenDecimals, tokenSymbol } = parseBalanceData(api)\n    return {\n      tokenDecimals,\n      tokenSymbol,\n    }\n  }\n\n  // Query the chain and parse data\n  const result: any = await api.query.system.account(address)\n  const balanceData = parseBalanceData(api, result?.data, formatterOptions)\n\n  return balanceData\n}\n\n/**\n * Watches the native token balance of the given `address` and returns it in a callback.\n * The returned void function can be used to unsubscribe.\n */\nexport const watchBalance = async (\n  api: ApiPromise,\n  address: string | AccountId | undefined,\n  callback: (data: BalanceData) => void,\n  formatterOptions?: BalanceFormatterOptions,\n): Promise<VoidFunction | null> => {\n  const { tokenDecimals, tokenSymbol } = parseBalanceData(api)\n  if (!address) {\n    callback({\n      tokenDecimals,\n      tokenSymbol,\n    })\n    return null\n  }\n\n  // Query the chain, parse data, and call the callback\n  const unsubscribe: any = await api.query.system.account(\n    address,\n    ({ data }: any) => {\n      const balanceData = parseBalanceData(api, data, formatterOptions)\n      callback(balanceData)\n    },\n  )\n  return unsubscribe\n}\n\n/**\n * Helper to parse the fetched balance data.\n */\nconst parseBalanceData = (\n  api: ApiPromise,\n  data?: any,\n  formatterOptions?: BalanceFormatterOptions,\n): BalanceData => {\n  // Get the token decimals and symbol\n  const tokenDecimals = api.registry.chainDecimals?.[0] || 12\n  const tokenSymbol = api.registry.chainTokens?.[0] || 'Unit'\n\n  // Get the balance\n  const freeBalance: BN = new BN(data?.free || 0)\n  const reservedBalance: BN = new BN(data?.reserved || 0)\n  const balance = reservedBalance.add(freeBalance)\n\n  // Format the balance\n  const balanceFormatted = formatBalance(api, balance, formatterOptions)\n\n  return {\n    tokenDecimals,\n    tokenSymbol,\n    freeBalance,\n    reservedBalance,\n    balance,\n    balanceFormatted,\n  }\n}\n","import { ApiPromise } from '@polkadot/api'\nimport { BN, formatBalance as polkadotFormatBalance } from '@polkadot/util'\n\nexport type PolkadotBalanceFormatterOptions = NonNullable<\n  Parameters<typeof polkadotFormatBalance>['1']\n>\n\nexport type BalanceFormatterOptions = Omit<\n  PolkadotBalanceFormatterOptions,\n  'forceUnit'\n> & {\n  forceUnit?: string | undefined | false\n  fixedDecimals?: number\n  fixedIfNecessary?: boolean\n}\n\n/**\n * Improved & extended version of `formatBalance` from `@polkadot/util`.\n */\nexport const formatBalance = (\n  api: ApiPromise | undefined,\n  value?: BN,\n  options?: BalanceFormatterOptions,\n): string => {\n  if (!value) return ''\n\n  const tokenDecimals = api?.registry?.chainDecimals?.[0] || 12\n  const tokenSymbol = api?.registry?.chainTokens?.[0] || 'Unit'\n\n  const _options: BalanceFormatterOptions = Object.assign(\n    {\n      decimals: tokenDecimals,\n      withZero: false,\n      withUnit: true,\n      forceUnit: '-',\n    } satisfies BalanceFormatterOptions,\n    options,\n  )\n\n  let formattedBalance = polkadotFormatBalance(value, {\n    ..._options,\n    withUnit: false,\n  } as PolkadotBalanceFormatterOptions)\n\n  // Convert to fixed decimals\n  if (_options.fixedDecimals !== undefined) {\n    // Remove siUnit amd add it back later\n    let siUnit\n    if (_options.forceUnit !== '-') {\n      siUnit = formattedBalance.split(' ')[1]\n      formattedBalance = formattedBalance.split(' ')[0]\n    }\n\n    if (_options.fixedIfNecessary) {\n      formattedBalance = toFixedIfNecessary(\n        formattedBalance,\n        _options.fixedDecimals,\n      ).toString()\n    } else {\n      formattedBalance = parseFloat(formattedBalance)\n        .toFixed(_options.fixedDecimals)\n        .toString()\n    }\n\n    if (siUnit) formattedBalance = `${formattedBalance} ${siUnit}`\n  }\n\n  // Place hairline space between number and `siUnit`\n  if (_options.forceUnit !== '-') {\n    const siUnit = formattedBalance.split(' ')[1]\n    formattedBalance = formattedBalance.split(' ')[0]\n    if (siUnit) formattedBalance = `${formattedBalance}\\u200A${siUnit}`\n  }\n\n  // Add token symbol\n  if (_options.withUnit === true) {\n    formattedBalance = `${formattedBalance} ${tokenSymbol}`\n  }\n\n  return formattedBalance\n}\n\n// Source: https://stackoverflow.com/a/32229831/1381666\nconst toFixedIfNecessary = (value: string | number, decimals: number) => {\n  const _value: string = typeof value === 'string' ? value : `${value}`\n  return +parseFloat(_value).toFixed(decimals)\n}\n","import { ApiPromise } from '@polkadot/api'\nimport type { WeightV2 } from '@polkadot/types/interfaces'\nimport { BN, bnToBn } from '@polkadot/util'\n\n/**\n * Helper function that returns Weights V2 `gasLimit` object.\n */\nexport const getGasLimit = (\n  api: ApiPromise,\n  _refTime: string | BN,\n  _proofSize: string | BN,\n) => {\n  const refTime = bnToBn(_refTime)\n  const proofSize = bnToBn(_proofSize)\n\n  return api.registry.createType('WeightV2', {\n    refTime,\n    proofSize,\n  }) as WeightV2\n}\n\n/**\n * Helper function that returns the maximum gas limit Weights V2 object\n * for an extrinsiv based on the api chain constants.\n * NOTE: It's reduced by a given factor (defaults to 80%) to avoid storage exhaust.\n */\nexport const getMaxGasLimit = (api: ApiPromise, reductionFactor = 0.8) => {\n  const blockWeights = api.consts.system.blockWeights.toPrimitive() as any\n  const maxExtrinsic = blockWeights?.perClass?.normal?.maxExtrinsic\n  const maxRefTime = maxExtrinsic?.refTime\n    ? bnToBn(maxExtrinsic.refTime)\n        .mul(new BN(reductionFactor * 100))\n        .div(new BN(100))\n    : new BN(0)\n  const maxProofSize = maxExtrinsic?.proofSize\n    ? bnToBn(maxExtrinsic.proofSize)\n        .mul(new BN(reductionFactor * 100))\n        .div(new BN(100))\n    : new BN(0)\n\n  return getGasLimit(api, maxRefTime, maxProofSize)\n}\n","import { ApiPromise } from '@polkadot/api'\nimport { CodePromise } from '@polkadot/api-contract'\nimport { ContractOptions } from '@polkadot/api-contract/types'\nimport { EventRecord, SignedBlock } from '@polkadot/types/interfaces'\nimport { IKeyringPair } from '@polkadot/types/types'\nimport { stringCamelCase } from '@polkadot/util'\nimport { getMaxGasLimit } from './getGasLimit'\n\n/**\n * Uploads & instantiates a contract on-chain.\n */\nexport const deployContract = async (\n  api: ApiPromise,\n  account: IKeyringPair | string,\n  abi: any,\n  wasm: Uint8Array | string | Buffer,\n  constructorMethod = 'new',\n  args = [] as unknown[],\n  options = {} as ContractOptions,\n) => {\n  return new Promise<{\n    address: string\n    hash: string\n    block: SignedBlock\n    blockNumber: number\n  }>(async (resolve, reject) => {\n    const code = new CodePromise(api, abi, wasm)\n    const gasLimit = getMaxGasLimit(api)\n    const constructorFn = code.tx[stringCamelCase(constructorMethod)]\n    const unsub = await constructorFn(\n      { gasLimit, ...options },\n      ...args,\n    ).signAndSend(account, async ({ events, contract, status }: any) => {\n      if (status?.isInBlock) {\n        unsub?.()\n\n        const extrinsicFailedEvent = events.find(\n          ({ event: { method } }: any) => method === 'ExtrinsicFailed',\n        ) as EventRecord\n        if (!!extrinsicFailedEvent || !contract?.address) {\n          console.error(\n            `Contract '${abi?.contract.name}' could not be deployed`,\n            extrinsicFailedEvent?.event?.data?.toHuman(),\n          )\n          return reject()\n        }\n\n        const hash = abi?.source.hash\n        const address = contract.address.toString()\n\n        // Determine block number\n        const blockHash = status.asInBlock.toHex()\n        const block = await api.rpc.chain.getBlock(blockHash)\n        const blockNumber = block.block.header.number.toNumber()\n\n        console.log(\n          `Contract '${abi?.contract.name}' deployed under ${address} at block #${blockNumber}`,\n        )\n\n        return resolve({\n          address,\n          hash,\n          block,\n          blockNumber,\n        })\n      }\n    })\n  })\n}\n","import { SubstrateChain } from '@chains'\nimport { ApiPromise, HttpProvider, WsProvider } from '@polkadot/api'\nimport { ApiOptions } from '@polkadot/api/types'\n\n/**\n * Helper to initialize polkadot.js API with given chain and options.\n */\nexport const initPolkadotJs = async (\n  chain: SubstrateChain,\n  options?: ApiOptions,\n): Promise<{ api: ApiPromise; provider: WsProvider | HttpProvider }> => {\n  const rpcUrl = chain.rpcUrls[0]\n  if (!rpcUrl) {\n    throw new Error('Given chain has no RPC url defined')\n  }\n\n  const provider = rpcUrl.startsWith('http')\n    ? new HttpProvider(rpcUrl)\n    : new WsProvider(rpcUrl)\n  const api = await ApiPromise.create({\n    provider,\n    ...options,\n  })\n\n  return { api, provider }\n}\n","import { ApiPromise } from '@polkadot/api'\nimport { AccountId } from '@polkadot/types/interfaces'\nimport {\n  Callback,\n  IKeyringPair,\n  ISubmittableResult,\n} from '@polkadot/types/types'\nimport { BN } from '@polkadot/util'\n\n/**\n * Transfers a given amount of tokens from one account to another.\n */\nexport const transferBalance = async (\n  api: ApiPromise,\n  fromAccount: IKeyringPair | string,\n  toAddress: string | AccountId,\n  amount: BN,\n  statusCb?: Callback<ISubmittableResult>,\n) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const unsub = await api.tx.balances\n        .transfer(toAddress, amount)\n        .signAndSend(fromAccount, (result) => {\n          statusCb?.(result)\n          const isInBlock = result?.status?.isInBlock\n          if (!isInBlock) return\n          const errorEvent = result?.events.find(\n            ({ event: { method } }: any) => method === 'ExtrinsicFailed',\n          )\n          if (isInBlock && errorEvent) {\n            // Reject if `ExtrinsicFailed` event was found\n            reject({\n              errorMessage: 'ExtrinsicFailed',\n              errorEvent,\n            })\n            unsub?.()\n          } else if (isInBlock) {\n            // Otherwise resolve succesfully if transaction is in block\n            resolve({ result })\n            unsub?.()\n          }\n        })\n    } catch (e) {\n      // Reject if user cancelled with `UserCancelled`\n      reject({ errorMessage: 'UserCancelled' })\n    }\n  })\n}\n\n/**\n * Transfers all available tokens from one account to another.\n */\nexport const transferFullBalance = async (\n  api: ApiPromise,\n  fromAccount: IKeyringPair | string,\n  toAddress: string | AccountId,\n  keepAlive?: boolean,\n  statusCb?: Callback<ISubmittableResult>,\n) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const unsub = await api.tx.balances\n        .transferAll(toAddress, !!keepAlive)\n        .signAndSend(fromAccount, (result) => {\n          statusCb?.(result)\n          const isInBlock = result?.status?.isInBlock\n          if (!isInBlock) return\n          const errorEvent = result?.events.find(\n            ({ event: { method } }: any) => method === 'ExtrinsicFailed',\n          )\n          if (isInBlock && errorEvent) {\n            // Reject if `ExtrinsicFailed` event was found\n            reject({\n              errorMessage: 'ExtrinsicFailed',\n              errorEvent,\n            })\n            unsub?.()\n          } else if (isInBlock) {\n            // Otherwise resolve succesfully if transaction is in block\n            resolve({ result })\n            unsub?.()\n          }\n        })\n    } catch (e) {\n      console.error(e)\n      // Reject if user cancelled with `UserCancelled`\n      reject({ errorMessage: 'UserCancelled' })\n    }\n  })\n}\n","import { ContractCallOutcome } from '@polkadot/api-contract/types'\n\n/**\n * Unwraps a Weights V2 result type or errors if there is no 'ok' value.\n */\nexport const unwrapResultOrError = <T = any>(\n  outcome: Pick<ContractCallOutcome, 'result' | 'output'>,\n): T => {\n  const { result, output } = outcome\n  if (!result?.isOk || !output) {\n    throw new Error(`Error while unwrapping: ${result.toString()}`)\n  }\n  return (output.toPrimitive() as { ok: T }).ok\n}\n\n/**\n * Unwraps a Weights V2 result type or returns the given default if there is no 'ok' value.\n */\nexport const unwrapResultOrDefault = <T = any>(\n  outcome: Pick<ContractCallOutcome, 'result' | 'output'>,\n  defaultValue: T,\n): T => {\n  const { result, output } = outcome\n  let unwrappedResult: T = defaultValue\n  if (result?.isOk && !!output) {\n    unwrappedResult = (output.toPrimitive() as { ok: T }).ok\n  }\n  return unwrappedResult\n}\n","import { ApiPromise } from '@polkadot/api'\nimport { Abi, ContractPromise } from '@polkadot/api-contract'\nimport { AccountId } from '@polkadot/types/interfaces'\nimport { Dispatch, SetStateAction } from 'react'\n\n/**\n * Substrate Deployment\n */\nexport interface SubstrateDeployment {\n  contractId: string\n  networkId: string\n  abi: string | Record<string, unknown> | Abi\n  address: string | AccountId\n}\n\n/**\n * Registering the given `deployment` with the given `setDeployments` dispatcher.\n * The registry is kept unique, so if there is already one deployment with\n * equal `contractId` and `networkId` it will be replaced.\n */\nexport const registerDeployment = (\n  setDeployments: Dispatch<SetStateAction<SubstrateDeployment[]>>,\n  deployment: SubstrateDeployment,\n) => {\n  setDeployments((deployments) => {\n    // Check if deployment already exists & remove\n    const idx = deployments.findIndex(\n      ({ contractId, networkId }) =>\n        contractId.toLowerCase() === deployment.contractId.toLowerCase() &&\n        networkId.toLowerCase() === deployment.networkId.toLowerCase(),\n    )\n    if (idx >= 0) deployments.splice(idx, 1)\n\n    // Add new deployment\n    return [...deployments, deployment]\n  })\n}\n\n/**\n * Registers all given `deployments` via `registerDeployment` after awaiting the promise.\n */\nexport const registerDeployments = async (\n  setDeployments: Dispatch<SetStateAction<SubstrateDeployment[]>>,\n  deployments: Promise<SubstrateDeployment[]>,\n) => {\n  ;(await deployments).forEach((deployment) =>\n    registerDeployment(setDeployments, deployment),\n  )\n}\n\n/**\n * Returns the first matching deployment from the given `deployments` array\n * with an equal `contractId` and `networkId`\n */\nexport const getDeployment = (\n  deployments: SubstrateDeployment[],\n  contractId: string,\n  networkId: string,\n) => {\n  return deployments.find((deployment) => {\n    return (\n      deployment.contractId.toLowerCase() === contractId.toLowerCase() &&\n      deployment.networkId.toLowerCase() === (networkId || '').toLowerCase()\n    )\n  })\n}\n\n/**\n * Takes the first matching deployment from the given `deployments` array\n * with an equal `contractId` and `networkId` and creates a `ContractPromise`.\n */\nexport const getDeploymentContract = (\n  api: ApiPromise,\n  deployments: SubstrateDeployment[],\n  contractId: string,\n  networkId: string,\n) => {\n  if (!api) return undefined\n  const deployment = getDeployment(deployments || [], contractId, networkId)\n  if (!deployment) return undefined\n  return new ContractPromise(api, deployment?.abi, deployment?.address)\n}\n","import {\n  InjectedExtension,\n  InjectedWindow,\n} from '@polkadot/extension-inject/types'\n\n/**\n * Substrate Wallet Type(s)\n */\nexport interface SubstrateWallet {\n  id: string\n  name: string\n  platforms: [SubstrateWalletPlatform, ...SubstrateWalletPlatform[]]\n  urls: {\n    website: string\n    chromeExtension?: string\n    firefoxExtension?: string\n    iosApp?: string\n    androidApp?: string\n  }\n  logoUrls: [string, ...string[]]\n}\nexport enum SubstrateWalletPlatform {\n  Browser = 'browser',\n  Android = 'android',\n  iOS = 'ios',\n}\n\n/**\n * Defined Substrate Wallet Constants\n */\nexport const polkadotjs: SubstrateWallet = {\n  id: 'polkadot-js',\n  name: 'Polkadot{.js}',\n  platforms: [SubstrateWalletPlatform.Browser],\n  urls: {\n    website: 'https://polkadot.js.org/extension/',\n    chromeExtension:\n      'https://chrome.google.com/webstore/detail/polkadot%7Bjs%7D-extension/mopnmbcafieddcagagdcbnhejhlodfdd',\n    firefoxExtension:\n      'https://addons.mozilla.org/en-US/firefox/addon/polkadot-js-extension/',\n  },\n  logoUrls: [\n    'https://github.com/scio-labs/use-inkathon/raw/main/assets/wallet-logos/polkadot@128w.png',\n    'https://github.com/scio-labs/use-inkathon/raw/main/assets/wallet-logos/polkadot@512w.png',\n  ],\n}\n\nexport const subwallet: SubstrateWallet = {\n  id: 'subwallet-js',\n  name: 'SubWallet',\n  platforms: [SubstrateWalletPlatform.Browser],\n  urls: {\n    website: 'https://subwallet.app/',\n    chromeExtension:\n      'https://chrome.google.com/webstore/detail/subwallet-polkadot-extens/onhogfjeacnfoofkfgppdlbmlmnplgbn',\n    firefoxExtension:\n      'https://addons.mozilla.org/en-US/firefox/addon/subwallet/',\n  },\n  logoUrls: [\n    'https://github.com/scio-labs/use-inkathon/raw/main/assets/wallet-logos/subwallet@128w.png',\n    'https://github.com/scio-labs/use-inkathon/raw/main/assets/wallet-logos/subwallet@512w.png',\n  ],\n}\n\nexport const talisman: SubstrateWallet = {\n  id: 'talisman',\n  name: 'Talisman',\n  platforms: [SubstrateWalletPlatform.Browser],\n  urls: {\n    website: 'https://www.talisman.xyz/',\n    chromeExtension:\n      'https://chrome.google.com/webstore/detail/talisman-polkadot-wallet/fijngjgcjhjmmpcmkeiomlglpeiijkld',\n    firefoxExtension:\n      'https://addons.mozilla.org/en-US/firefox/addon/talisman-wallet-extension/',\n  },\n  logoUrls: [\n    'https://github.com/scio-labs/use-inkathon/raw/main/assets/wallet-logos/talisman@128w.png',\n    'https://github.com/scio-labs/use-inkathon/raw/main/assets/wallet-logos/talisman@512w.png',\n  ],\n}\n\nexport const nova: SubstrateWallet = {\n  id: 'nova',\n  name: 'Nova Wallet',\n  platforms: [SubstrateWalletPlatform.Android, SubstrateWalletPlatform.iOS],\n  urls: {\n    website: 'https://novawallet.io/',\n    androidApp:\n      'https://play.google.com/store/apps/details?id=io.novafoundation.nova.market',\n    iosApp:\n      'https://apps.apple.com/app/nova-polkadot-kusama-wallet/id1597119355',\n  },\n  logoUrls: [\n    'https://github.com/scio-labs/use-inkathon/raw/main/assets/wallet-logos/nova@128w.png',\n    'https://github.com/scio-labs/use-inkathon/raw/main/assets/wallet-logos/nova@512w.png',\n  ],\n}\n\n/**\n * Exporting all wallets separately\n */\nexport const allSubstrateWallets: SubstrateWallet[] = [\n  subwallet,\n  talisman,\n  polkadotjs,\n  nova,\n]\n\n/**\n * Returns wallet (if existent) for given identifier (`id` field).\n */\nexport const getSubstrateWallet = (id: string): SubstrateWallet | undefined => {\n  return allSubstrateWallets.find(\n    (wallet) => wallet.id.toLowerCase() === id.toLowerCase(),\n  )\n}\n\n/*\n * Returns `true` if wallet is installed, `false` if not, and\n * `undefined` if the environment is not a client browser.\n */\nexport const isWalletInstalled = (wallet: SubstrateWallet) => {\n  try {\n    if (typeof window === 'undefined') return undefined\n    const injectedWindow = window as Window & InjectedWindow\n    const injectedExtension = injectedWindow?.injectedWeb3?.[wallet.id]\n    return !!injectedExtension\n  } catch (e) {\n    return undefined\n  }\n}\n\n/**\n * Enables the given wallet (if existent) and returns the injected extension.\n */\nexport const enableWallet = async (\n  wallet: SubstrateWallet,\n  appName: string,\n) => {\n  if (!isWalletInstalled(wallet)) return undefined\n\n  try {\n    if (typeof window === 'undefined') return undefined\n    const injectedWindow = window as Window & InjectedWindow\n    const injectedWindowProvider = injectedWindow?.injectedWeb3?.[wallet.id]\n    const injectedExtension: InjectedExtension = {\n      ...(await injectedWindowProvider?.enable(appName)),\n      name: wallet.id,\n      version: injectedWindowProvider.version,\n    }\n    return injectedExtension\n  } catch (e) {\n    return undefined\n  }\n}\n","import { accountArraysAreEqual, accountsAreEqual } from '@helpers'\nimport { initPolkadotJs } from '@helpers/initPolkadotJs'\nimport { ApiPromise, HttpProvider, WsProvider } from '@polkadot/api'\nimport { ApiOptions } from '@polkadot/api/types'\nimport {\n  InjectedAccount,\n  InjectedExtension,\n  Unsubcall,\n} from '@polkadot/extension-inject/types'\nimport { Signer } from '@polkadot/types/types'\nimport { SubstrateDeployment, registerDeployments } from '@registry'\nimport {\n  SubstrateWallet,\n  allSubstrateWallets,\n  enableWallet,\n  getSubstrateWallet,\n  isWalletInstalled,\n} from '@wallets'\nimport {\n  Dispatch,\n  FC,\n  PropsWithChildren,\n  SetStateAction,\n  createContext,\n  useContext,\n  useEffect,\n  useState,\n} from 'react'\nimport { SubstrateChain, getSubstrateChain } from './chains'\n\n/**\n * Helper Types\n */\nexport enum UseInkathonErrorCode {\n  InitializationError,\n  NoSubstrateExtensionDetected,\n  NoAccountInjected,\n}\nexport interface UseInkathonError {\n  code: UseInkathonErrorCode\n  message: string\n}\n\n/**\n * UseInkathon Context Type\n */\nexport type UseInkathonProviderContextType = {\n  isInitializing?: boolean\n  isInitialized?: boolean\n  isConnecting?: boolean\n  isConnected?: boolean\n  error?: UseInkathonError\n  activeChain?: SubstrateChain\n  switchActiveChain?: (chain: SubstrateChain) => Promise<void>\n  api?: ApiPromise\n  provider?: WsProvider | HttpProvider\n  connect?: (\n    chain?: SubstrateChain,\n    wallet?: SubstrateWallet,\n    lastActiveAccountAddress?: string,\n  ) => Promise<void>\n  disconnect?: () => void\n  accounts?: InjectedAccount[]\n  activeAccount?: InjectedAccount\n  activeExtension?: InjectedExtension\n  activeSigner?: Signer\n  setActiveAccount?: Dispatch<SetStateAction<InjectedAccount | undefined>>\n  lastActiveAccount?: InjectedAccount\n  deployments?: SubstrateDeployment[]\n}\nexport const UseInkathonProviderContext =\n  createContext<UseInkathonProviderContextType | null>(null)\n\n/**\n * Primary useInkathon hook that exposes `UseInkathonProviderContext`.\n */\nexport const useInkathon = () => {\n  const context = useContext(UseInkathonProviderContext)\n\n  if (!context)\n    throw new Error('useInkathon must be used within a UseInkathonProvider')\n\n  return context\n}\n\n/**\n * Primary useInkathon provider that needs to be wrapped around the app\n * (see documentation) to use `useInkathon` and other hooks anywhere.\n */\nexport interface UseInkathonProviderProps extends PropsWithChildren {\n  appName: string\n  defaultChain: SubstrateChain | SubstrateChain['network']\n  connectOnInit?: boolean\n  deployments?: Promise<SubstrateDeployment[]>\n  apiOptions?: ApiOptions\n}\nexport const UseInkathonProvider: FC<UseInkathonProviderProps> = ({\n  children,\n  appName,\n  defaultChain,\n  connectOnInit,\n  deployments: _deployments,\n  apiOptions,\n}) => {\n  // Check if default chain was provided\n  if (\n    !defaultChain ||\n    (typeof defaultChain === 'string' &&\n      getSubstrateChain(defaultChain) === undefined)\n  ) {\n    throw new Error(\n      'None or invalid `defaultChain` provided with `UseInkathonProvider`. Forgot to set environment variable?',\n    )\n  }\n\n  // Setup state variables\n  const [isInitializing, setIsInitializing] = useState(true)\n  const [isInitialized, setIsInitialized] = useState(false)\n  const [isConnecting, setIsConnecting] = useState(connectOnInit)\n  const [isConnected, setIsConnected] = useState(false)\n  const [error, setError] = useState<UseInkathonError | undefined>()\n  const [activeChain, setActiveChain] = useState<SubstrateChain>(\n    (typeof defaultChain === 'string'\n      ? getSubstrateChain(defaultChain)\n      : defaultChain) as SubstrateChain,\n  )\n  const [api, setApi] = useState<ApiPromise>()\n  const [provider, setProvider] = useState<WsProvider | HttpProvider>()\n  const [accounts, setAccounts] = useState<InjectedAccount[]>([])\n  const [activeAccount, setActiveAccount] = useState<InjectedAccount>()\n  const [activeExtension, setActiveExtension] = useState<InjectedExtension>()\n  const [lastActiveAccount, setLastActiveAccount] = useState<InjectedAccount>()\n  const [activeSigner, setActiveSigner] = useState<Signer>()\n  const [unsubscribeAccounts, setUnsubscribeAccounts] = useState<Unsubcall>()\n  const [deployments, setDeployments] = useState<SubstrateDeployment[]>([])\n\n  // Register given deployments\n  useEffect(() => {\n    if (_deployments) registerDeployments(setDeployments, _deployments)\n  }, [])\n\n  // Initialize polkadot-js/api\n  const initialize = async (chain?: SubstrateChain) => {\n    setIsInitialized(!!api?.isConnected)\n    setIsInitializing(true)\n    setIsConnected(false)\n    setError(undefined)\n\n    try {\n      const _chain = chain || activeChain\n      const { api, provider } = await initPolkadotJs(_chain, {\n        noInitWarn: true,\n        throwOnConnect: true,\n        ...apiOptions,\n      })\n      setProvider(provider)\n      setApi(api)\n      setIsInitialized(true)\n\n      // Update active chain if switching\n      if (activeChain.network !== _chain.network) setActiveChain(_chain)\n    } catch (e) {\n      const message = 'Error while initializing polkadot.js api'\n      console.error(message, e)\n      setError({ code: UseInkathonErrorCode.InitializationError, message })\n      setIsConnected(false)\n      setIsConnecting(false)\n      setIsInitialized(false)\n      setApi(undefined)\n      setProvider(undefined)\n    } finally {\n      setIsInitializing(false)\n    }\n  }\n\n  // Updates account list and active account\n  const updateAccounts = (\n    injectedAccounts: InjectedAccount[],\n    lastActiveAccountAddress?: string,\n  ) => {\n    const newAccounts = injectedAccounts || []\n    // Find active account in new accounts or fallback to latest account\n    const _lastAccount = lastActiveAccountAddress\n      ? { address: lastActiveAccountAddress }\n      : lastActiveAccount\n    const newAccount =\n      newAccounts.find((a) => accountsAreEqual(a, _lastAccount)) ||\n      newAccounts?.[0]\n\n    // Update accounts and active account\n    if (!accountArraysAreEqual(accounts, newAccounts)) {\n      setAccounts(() => newAccounts)\n    }\n    if (!accountsAreEqual(activeAccount, newAccount)) {\n      setActiveAccount(() => newAccount)\n    }\n    setIsConnected(!!newAccount)\n  }\n  useEffect(() => {\n    if (activeAccount && !accountsAreEqual(activeAccount, lastActiveAccount)) {\n      setLastActiveAccount(() => activeAccount)\n    }\n  }, [activeAccount])\n\n  // Connect to injected wallet\n  const connect = async (\n    chain?: SubstrateChain,\n    wallet?: SubstrateWallet,\n    lastActiveAccountAddress?: string,\n  ) => {\n    setError(undefined)\n    setIsConnecting(true)\n    setIsConnected(!!activeAccount)\n\n    // Make sure api is initialized & connected to provider\n    if (!api?.isConnected || (chain && chain.network !== activeChain.network)) {\n      await initialize(chain)\n    }\n\n    try {\n      // Determine installed wallets\n      const wallets = allSubstrateWallets.filter((w) => isWalletInstalled(w))\n      if (!wallets?.length) {\n        const message = 'No Substrate-compatible extension detected'\n        setError({\n          code: UseInkathonErrorCode.NoSubstrateExtensionDetected,\n          message,\n        })\n        throw new Error(message)\n      }\n\n      // Determine wallet to use\n      const preferredWallet = wallet && wallets.find((w) => w.id === wallet.id)\n      const _wallet = preferredWallet || wallets[0]\n\n      // Enable wallet\n      const extension = await enableWallet(_wallet, appName)\n      const signer = extension?.signer as Signer\n      setActiveExtension(extension)\n      setActiveSigner(signer)\n\n      // Query & keep listening to injected accounts\n      unsubscribeAccounts?.()\n      const unsubscribe = extension?.accounts.subscribe((accounts) => {\n        updateAccounts(accounts, lastActiveAccountAddress)\n      })\n      setUnsubscribeAccounts(unsubscribe)\n    } catch (e: any) {\n      console.error('Error while connecting wallet:', e)\n      setActiveExtension(undefined)\n      setActiveSigner(undefined)\n      setIsConnected(false)\n    } finally {\n      setIsConnecting(false)\n    }\n  }\n\n  // Keep active signer up to date\n  useEffect(() => {\n    api?.setSigner(activeSigner as Signer)\n  }, [api, activeSigner])\n\n  // Disconnect\n  const disconnect = async (disconnectApi?: boolean) => {\n    if (disconnectApi) {\n      await api?.disconnect()\n      return\n    }\n    setIsConnected(false)\n    updateAccounts([])\n    unsubscribeAccounts?.()\n    setUnsubscribeAccounts(undefined)\n    setActiveExtension(undefined)\n  }\n\n  // API Disconnection listener\n  useEffect(() => {\n    const handler = () => {\n      disconnect()\n      setIsInitialized(false)\n    }\n    api?.on('disconnected', handler)\n    return () => {\n      api?.off('disconnected', handler)\n    }\n  }, [api])\n\n  // Initialze\n  useEffect(() => {\n    connectOnInit ? connect() : initialize()\n    return () => {\n      unsubscribeAccounts?.()\n    }\n  }, [])\n\n  // Switch active chain\n  const switchActiveChain = async (chain: SubstrateChain) => {\n    const activeWallet =\n      activeExtension && getSubstrateWallet(activeExtension.name)\n    await connect(chain, activeWallet)\n  }\n\n  return (\n    <UseInkathonProviderContext.Provider\n      value={{\n        isInitializing,\n        isInitialized,\n        isConnecting,\n        isConnected,\n        error,\n        activeChain,\n        switchActiveChain,\n        api,\n        provider,\n        connect,\n        disconnect,\n        accounts,\n        activeAccount,\n        activeExtension,\n        activeSigner,\n        setActiveAccount,\n        lastActiveAccount,\n        deployments,\n      }}\n    >\n      {children}\n    </UseInkathonProviderContext.Provider>\n  )\n}\n","import { BalanceFormatterOptions } from '@helpers'\nimport { BalanceData, getBalance, watchBalance } from '@helpers/getBalance'\nimport { AccountId } from '@polkadot/types/interfaces'\nimport { BN } from '@polkadot/util'\nimport { useInkathon } from '@provider'\nimport { useEffect, useState } from 'react'\n\n/**\n * Hook that returns the native token balance of the given `address`.\n */\nexport const useBalance = (\n  address?: string | AccountId,\n  watch?: boolean,\n  formatterOptions?: BalanceFormatterOptions,\n) => {\n  const { api } = useInkathon()\n  const [freeBalance, setFreeBalance] = useState<BN>()\n  const [reservedBalance, setReservedBalance] = useState<BN>()\n  const [balance, setBalance] = useState<BN>()\n  const [balanceFormatted, setBalanceFormatted] = useState<string>()\n  const [tokenSymbol, setTokenSymbol] = useState<string>()\n  const [tokenDecimals, setTokenDecimals] = useState<number>()\n  const [unsubscribes, setUnsubscribes] = useState<(VoidFunction | null)[]>([])\n\n  useEffect(() => {\n    const updateBalanceData = (data: BalanceData) => {\n      setFreeBalance(data.freeBalance)\n      setReservedBalance(data.reservedBalance)\n      setBalance(data.balance)\n      setBalanceFormatted(data.balanceFormatted)\n      setTokenSymbol(data.tokenSymbol)\n      setTokenDecimals(data.tokenDecimals)\n    }\n\n    if (!api) {\n      updateBalanceData({} as BalanceData)\n      return\n    }\n\n    if (watch) {\n      watchBalance(api, address, updateBalanceData, formatterOptions).then(\n        (unsubscribe) => {\n          setUnsubscribes((prev) => [...prev, unsubscribe])\n        },\n      )\n    } else {\n      getBalance(api, address, formatterOptions).then(updateBalanceData)\n    }\n\n    return () => {\n      unsubscribes.forEach((unsubscribe) => unsubscribe?.())\n      setUnsubscribes(() => [])\n    }\n  }, [api, address])\n\n  return {\n    freeBalance,\n    reservedBalance,\n    balance,\n    balanceFormatted,\n    tokenSymbol,\n    tokenDecimals,\n  }\n}\n","import { Abi, ContractPromise } from '@polkadot/api-contract'\nimport { AccountId } from '@polkadot/types/interfaces'\nimport { useInkathon } from '@provider'\nimport { useEffect, useState } from 'react'\n\n/**\n * React Hook that returns a `ContractPromise` object configured with\n * the active api & chain as well as the given `abi` and `address`.\n */\nexport const useContract = (\n  abi?: string | Record<string, unknown> | Abi,\n  address?: string | AccountId,\n) => {\n  const { api, isConnecting } = useInkathon()\n  const [contract, setContract] = useState<ContractPromise | undefined>()\n\n  const initialize = async () => {\n    if (isConnecting || !api || !abi || !address) {\n      setContract(undefined)\n      return\n    }\n    const contract = new ContractPromise(api, abi, address)\n    setContract(contract)\n  }\n  useEffect(() => {\n    initialize()\n  }, [api, isConnecting, abi, address])\n\n  return {\n    contract,\n    address,\n  }\n}\n","import { useInkathon } from '@provider'\nimport { getDeployment } from '@registry'\nimport { useContract } from './useContract'\n\n/**\n * React Hook that returns a `ContractPromise` object configured with\n * the active api & chain as well as the given deployment contract id\n * which is looked up from the deployments registry.\n */\nexport const useRegisteredContract = (\n  contractId: string,\n  networkId?: string,\n) => {\n  const { deployments, activeChain } = useInkathon()\n  networkId = networkId || activeChain?.network || ''\n  const deployment = getDeployment(deployments || [], contractId, networkId)\n  return useContract(deployment?.abi, deployment?.address)\n}\n"]}