import type { ContractMetadataLatest, ContractMetadataV4 } from '@polkadot/types/interfaces';
import type { Registry } from '@polkadot/types/types';
export declare const enumVersions: readonly ["V4", "V3", "V2", "V1"];
type Versions = typeof enumVersions[number] | 'V0';
type Converter = (registry: Registry, vx: any) => ContractMetadataLatest;
export declare function v4ToLatest(_registry: Registry, v4: ContractMetadataV4): ContractMetadataLatest;
export declare const v3ToLatest: (registry: Registry, input: import("@polkadot/types/interfaces").ContractMetadataV3) => ContractMetadataLatest;
export declare const v2ToLatest: (registry: Registry, input: import("@polkadot/types/interfaces").ContractMetadataV2) => ContractMetadataLatest;
export declare const v1ToLatest: (registry: Registry, input: import("@polkadot/types/interfaces").ContractMetadataV1) => ContractMetadataLatest;
export declare const v0ToLatest: (registry: Registry, input: import("@polkadot/types/interfaces").ContractMetadataV0) => ContractMetadataLatest;
export declare const convertVersions: [Versions, Converter][];
export {};
